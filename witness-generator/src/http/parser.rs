use super::*;

const SPACE: u8 = 32;
const CR: u8 = 13;
const LF: u8 = 10;
const COLON: u8 = 58;

pub fn parse(bytes: &[u8], polynomial_input: F) -> Result<Vec<HttpMachine>, WitnessGeneratorError> {
  let mut machine = HttpMachine {
    header_num:    0,
    status:        HttpStatus::ParsingStart(StartLineLocation::Beginning),
    line_digest:   F::ZERO,
    line_monomial: F::ONE,
  };

  let mut output = vec![];
  let mut line_ctr = 0;
  for (_ctr, char) in bytes.iter().enumerate() {
    // println!("-------------------------------------------------");
    // println!("char: {:?}, {}", *char as char, *char);
    // println!("-------------------------------------------------");
    match (*char, machine.status) {
      (SPACE, HttpStatus::ParsingStart(loc)) => {
        match loc {
          StartLineLocation::Beginning =>
            machine.status = HttpStatus::ParsingStart(StartLineLocation::Middle),
          StartLineLocation::Middle =>
            machine.status = HttpStatus::ParsingStart(StartLineLocation::End),
          StartLineLocation::End => {},
        };
        machine.line_digest += polynomial_input.pow([line_ctr]) * F::from(*char as u64);
        line_ctr += 1;
      },
      (
        CR,
        HttpStatus::ParsingStart(StartLineLocation::End)
        | HttpStatus::ParsingHeader(NameOrValue::Value),
      ) => {
        machine.status = HttpStatus::LineStatus(LineStatus::CR);
        line_ctr = 0;
        machine.line_digest = F::ZERO;
      },
      (CR, HttpStatus::LineStatus(LineStatus::CRLF)) => {
        machine.status = HttpStatus::LineStatus(LineStatus::CRLFCR);
        line_ctr = 0;
        machine.line_digest = F::ZERO;
      },
      (LF, HttpStatus::LineStatus(LineStatus::CR)) => {
        machine.status = HttpStatus::LineStatus(LineStatus::CRLF);
        line_ctr = 0;
        machine.line_digest = F::ZERO;
      },
      (LF, HttpStatus::LineStatus(LineStatus::CRLFCR)) => {
        machine.status = HttpStatus::ParsingBody;
        machine.header_num = 0;
        line_ctr = 0;
        machine.line_digest = F::ZERO;
      },
      (_, HttpStatus::LineStatus(LineStatus::CRLF)) => {
        machine.status = HttpStatus::ParsingHeader(NameOrValue::Name);
        machine.header_num += 1;
        machine.line_digest += polynomial_input.pow([line_ctr]) * F::from(*char as u64);
        line_ctr += 1;
      },
      (COLON, HttpStatus::ParsingHeader(NameOrValue::Name)) => {
        machine.status = HttpStatus::ParsingHeader(NameOrValue::Value);
        machine.line_digest += polynomial_input.pow([line_ctr]) * F::from(*char as u64);
        line_ctr += 1;
      },
      (_, HttpStatus::ParsingBody) => {},
      _ => {
        machine.line_digest += polynomial_input.pow([line_ctr]) * F::from(*char as u64);
        line_ctr += 1;
      },
    }
    machine.line_monomial = if line_ctr == 0 { F::ZERO } else { polynomial_input.pow([line_ctr]) };
    output.push(machine);
    // let raw_state = RawHttpMachine::from(machine);

    // println!(
    //   "state[ {ctr:?} ].parsing_start       = {:?}",
    //   BigUint::from_bytes_le(&raw_state.parsing_start.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].parsing_header      = {:?}",
    //   BigUint::from_bytes_le(&raw_state.parsing_header.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].parsing_field_name  = {:?}",
    //   BigUint::from_bytes_le(&raw_state.parsing_field_name.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].parsing_field_value = {:?}",
    //   BigUint::from_bytes_le(&raw_state.parsing_field_value.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].parsing_body        = {:?}",
    //   BigUint::from_bytes_le(&raw_state.parsing_body.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].line_status         = {:?}",
    //   BigUint::from_bytes_le(&raw_state.line_status.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].inner_main_digest   = {:?}",
    //   BigUint::from_bytes_le(&raw_state.line_digest.to_bytes())
    // );
    // println!(
    //   "state[ {ctr:?} ].line_monomial       = {:?}",
    //   BigUint::from_bytes_le(&raw_state.line_monomial.to_bytes())
    // );
    // println!("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
  }
  Ok(output)
}

#[cfg(test)]
mod tests {
  use halo2curves::bn256::Fr;

  use super::*;

  #[test]
  pub fn test_parse_http() {
    // It's funny to me every time
    let polynomial_input = poseidon::<2>(&[F::from(69), F::from(420)]);
    let states = parse(mock::RESPONSE_PLAINTEXT.as_bytes(), polynomial_input).unwrap();
    assert_eq!(states.len(), mock::RESPONSE_PLAINTEXT.len());

    let machine_state = RawHttpMachine::from(states.last().unwrap().to_owned());
    assert_eq!(machine_state.parsing_start, F::ZERO);
    assert_eq!(machine_state.parsing_header, F::ZERO);
    assert_eq!(machine_state.parsing_field_name, F::ZERO);
    assert_eq!(machine_state.parsing_field_value, F::ZERO);
    assert_eq!(machine_state.parsing_body, F::ONE);
    assert_eq!(machine_state.line_status, F::from(0));
    assert_eq!(machine_state.line_digest, F::from(0));
    assert_eq!(machine_state.line_monomial, F::from(0));
  }

  const HTTP_BYTES: [u8; 915] = [
    72, 84, 84, 80, 47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 13, 10, 67, 111, 110, 110, 101, 99,
    116, 105, 111, 110, 58, 32, 99, 108, 111, 115, 101, 13, 10, 67, 111, 110, 116, 101, 110, 116,
    45, 76, 101, 110, 103, 116, 104, 58, 32, 50, 50, 13, 10, 67, 97, 99, 104, 101, 45, 67, 111,
    110, 116, 114, 111, 108, 58, 32, 109, 97, 120, 45, 97, 103, 101, 61, 51, 48, 48, 13, 10, 67,
    111, 110, 116, 101, 110, 116, 45, 83, 101, 99, 117, 114, 105, 116, 121, 45, 80, 111, 108, 105,
    99, 121, 58, 32, 100, 101, 102, 97, 117, 108, 116, 45, 115, 114, 99, 32, 39, 110, 111, 110,
    101, 39, 59, 32, 115, 116, 121, 108, 101, 45, 115, 114, 99, 32, 39, 117, 110, 115, 97, 102,
    101, 45, 105, 110, 108, 105, 110, 101, 39, 59, 32, 115, 97, 110, 100, 98, 111, 120, 13, 10, 67,
    111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108,
    97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 13, 10, 69,
    84, 97, 103, 58, 32, 34, 101, 48, 101, 54, 53, 49, 48, 99, 49, 102, 99, 49, 51, 98, 51, 97, 54,
    51, 97, 99, 98, 99, 48, 54, 49, 53, 101, 101, 48, 55, 97, 52, 57, 53, 50, 56, 55, 51, 97, 56,
    100, 97, 55, 55, 48, 50, 55, 100, 48, 48, 52, 49, 50, 102, 99, 99, 102, 49, 97, 53, 99, 101,
    50, 57, 34, 13, 10, 83, 116, 114, 105, 99, 116, 45, 84, 114, 97, 110, 115, 112, 111, 114, 116,
    45, 83, 101, 99, 117, 114, 105, 116, 121, 58, 32, 109, 97, 120, 45, 97, 103, 101, 61, 51, 49,
    53, 51, 54, 48, 48, 48, 13, 10, 88, 45, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112,
    101, 45, 79, 112, 116, 105, 111, 110, 115, 58, 32, 110, 111, 115, 110, 105, 102, 102, 13, 10,
    88, 45, 70, 114, 97, 109, 101, 45, 79, 112, 116, 105, 111, 110, 115, 58, 32, 100, 101, 110,
    121, 13, 10, 88, 45, 88, 83, 83, 45, 80, 114, 111, 116, 101, 99, 116, 105, 111, 110, 58, 32,
    49, 59, 32, 109, 111, 100, 101, 61, 98, 108, 111, 99, 107, 13, 10, 88, 45, 71, 105, 116, 72,
    117, 98, 45, 82, 101, 113, 117, 101, 115, 116, 45, 73, 100, 58, 32, 55, 56, 51, 49, 58, 51, 50,
    55, 52, 49, 52, 58, 49, 50, 70, 57, 69, 54, 58, 49, 65, 51, 51, 67, 50, 58, 54, 55, 54, 52, 54,
    56, 70, 49, 13, 10, 65, 99, 99, 101, 112, 116, 45, 82, 97, 110, 103, 101, 115, 58, 32, 98, 121,
    116, 101, 115, 13, 10, 68, 97, 116, 101, 58, 32, 84, 104, 117, 44, 32, 49, 57, 32, 68, 101, 99,
    32, 50, 48, 50, 52, 32, 50, 49, 58, 51, 53, 58, 53, 57, 32, 71, 77, 84, 13, 10, 86, 105, 97,
    58, 32, 49, 46, 49, 32, 118, 97, 114, 110, 105, 115, 104, 13, 10, 88, 45, 83, 101, 114, 118,
    101, 100, 45, 66, 121, 58, 32, 99, 97, 99, 104, 101, 45, 104, 121, 100, 49, 49, 48, 48, 48, 51,
    52, 45, 72, 89, 68, 13, 10, 88, 45, 67, 97, 99, 104, 101, 58, 32, 72, 73, 84, 13, 10, 88, 45,
    67, 97, 99, 104, 101, 45, 72, 105, 116, 115, 58, 32, 48, 13, 10, 88, 45, 84, 105, 109, 101,
    114, 58, 32, 83, 49, 55, 51, 52, 54, 52, 52, 49, 54, 48, 46, 53, 54, 48, 57, 53, 51, 44, 86,
    83, 48, 44, 86, 69, 49, 13, 10, 86, 97, 114, 121, 58, 32, 65, 117, 116, 104, 111, 114, 105,
    122, 97, 116, 105, 111, 110, 44, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105,
    110, 103, 44, 79, 114, 105, 103, 105, 110, 13, 10, 65, 99, 99, 101, 115, 115, 45, 67, 111, 110,
    116, 114, 111, 108, 45, 65, 108, 108, 111, 119, 45, 79, 114, 105, 103, 105, 110, 58, 32, 42,
    13, 10, 67, 114, 111, 115, 115, 45, 79, 114, 105, 103, 105, 110, 45, 82, 101, 115, 111, 117,
    114, 99, 101, 45, 80, 111, 108, 105, 99, 121, 58, 32, 99, 114, 111, 115, 115, 45, 111, 114,
    105, 103, 105, 110, 13, 10, 88, 45, 70, 97, 115, 116, 108, 121, 45, 82, 101, 113, 117, 101,
    115, 116, 45, 73, 68, 58, 32, 50, 48, 97, 101, 102, 56, 55, 48, 50, 53, 102, 54, 56, 52, 98,
    101, 55, 54, 50, 53, 55, 102, 49, 53, 98, 102, 102, 53, 97, 55, 57, 50, 97, 99, 49, 53, 97, 97,
    100, 50, 13, 10, 69, 120, 112, 105, 114, 101, 115, 58, 32, 84, 104, 117, 44, 32, 49, 57, 32,
    68, 101, 99, 32, 50, 48, 50, 52, 32, 50, 49, 58, 52, 48, 58, 53, 57, 32, 71, 77, 84, 13, 10,
    83, 111, 117, 114, 99, 101, 45, 65, 103, 101, 58, 32, 49, 53, 51, 13, 10, 13, 10, 123, 10, 32,
    32, 34, 104, 101, 108, 108, 111, 34, 58, 32, 34, 119, 111, 114, 108, 100, 34, 10, 125,
  ];

  const REDDIT_HTTP_REQUEST: [u8; 1685] = [
    80, 79, 83, 84, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 113, 108, 46, 114, 101, 100, 100,
    105, 116, 46, 99, 111, 109, 47, 32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 97, 117, 116, 104,
    111, 114, 105, 122, 97, 116, 105, 111, 110, 58, 32, 66, 101, 97, 114, 101, 114, 32, 101, 121,
    74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73, 109, 116,
    112, 90, 67, 73, 54, 73, 108, 78, 73, 81, 84, 73, 49, 78, 106, 112, 122, 83, 51, 100, 115, 77,
    110, 108, 115, 86, 48, 86, 116, 77, 106, 86, 109, 99, 88, 104, 119, 84, 85, 52, 48, 99, 87, 89,
    52, 77, 88, 69, 50, 79, 87, 70, 70, 100, 87, 70, 121, 77, 110, 112, 76, 77, 85, 100, 104, 86,
    71, 120, 106, 100, 87, 78, 90, 73, 105, 119, 105, 100, 72, 108, 119, 73, 106, 111, 105, 83,
    108, 100, 85, 73, 110, 48, 46, 101, 121, 74, 122, 100, 87, 73, 105, 79, 105, 74, 49, 99, 50,
    86, 121, 73, 105, 119, 105, 90, 88, 104, 119, 73, 106, 111, 120, 78, 122, 77, 53, 77, 122, 99,
    121, 77, 68, 69, 120, 76, 106, 85, 122, 77, 106, 103, 51, 79, 83, 119, 105, 97, 87, 70, 48, 73,
    106, 111, 120, 78, 122, 77, 53, 77, 106, 103, 49, 78, 106, 69, 120, 76, 106, 85, 122, 77, 106,
    103, 51, 79, 83, 119, 105, 97, 110, 82, 112, 73, 106, 111, 105, 82, 106, 86, 53, 78, 85, 57,
    82, 79, 72, 70, 110, 84, 108, 78, 82, 77, 50, 57, 48, 101, 71, 78, 67, 100, 87, 108, 112, 90,
    106, 82, 120, 86, 110, 90, 113, 90, 110, 108, 82, 73, 105, 119, 105, 89, 50, 108, 107, 73, 106,
    111, 105, 77, 70, 73, 116, 86, 48, 70, 78, 97, 72, 86, 118, 98, 121, 49, 78, 101, 86, 69, 105,
    76, 67, 74, 115, 97, 87, 81, 105, 79, 105, 74, 48, 77, 108, 57, 48, 89, 88, 112, 112, 78, 109,
    49, 114, 73, 105, 119, 105, 89, 87, 108, 107, 73, 106, 111, 105, 100, 68, 74, 102, 100, 71, 70,
    54, 97, 84, 90, 116, 97, 121, 73, 115, 73, 109, 120, 106, 89, 83, 73, 54, 77, 84, 85, 120, 78,
    106, 89, 52, 78, 68, 89, 119, 77, 84, 85, 120, 77, 121, 119, 105, 99, 50, 78, 119, 73, 106,
    111, 105, 90, 85, 112, 52, 97, 50, 116, 107, 82, 48, 57, 48, 82, 69, 70, 74, 97, 71, 81, 116,
    82, 109, 69, 49, 88, 50, 100, 109, 78, 86, 86, 102, 98, 84, 65, 120, 100, 71, 78, 90, 89, 88,
    78, 77, 85, 87, 70, 118, 97, 122, 78, 117, 78, 48, 82, 87, 98, 50, 78, 114, 78, 122, 65, 51,
    89, 48, 81, 48, 99, 69, 104, 81, 79, 85, 82, 76, 98, 51, 70, 71, 82, 69, 78, 97, 87, 71, 100,
    120, 98, 107, 70, 67, 82, 109, 100, 85, 99, 108, 82, 69, 81, 108, 74, 49, 86, 68, 108, 117, 84,
    71, 48, 122, 90, 122, 74, 112, 84, 109, 85, 52, 100, 70, 108, 122, 87, 109, 53, 68, 81, 107,
    90, 116, 100, 48, 90, 69, 99, 109, 116, 116, 84, 69, 100, 122, 97, 86, 70, 82, 98, 87, 86, 75,
    83, 87, 70, 53, 101, 72, 78, 116, 98, 48, 108, 77, 84, 110, 108, 71, 101, 88, 86, 48, 82, 48,
    53, 79, 84, 70, 81, 119, 85, 85, 112, 120, 97, 71, 78, 78, 99, 109, 86, 71, 83, 72, 66, 106,
    77, 109, 57, 105, 97, 50, 74, 112, 78, 84, 90, 107, 82, 48, 90, 88, 78, 88, 74, 69, 101, 87,
    57, 122, 86, 109, 90, 115, 77, 72, 82, 113, 82, 48, 90, 77, 87, 87, 53, 52, 97, 109, 78, 105,
    99, 88, 99, 121, 99, 72, 86, 68, 78, 109, 53, 78, 97, 50, 53, 77, 85, 88, 90, 114, 99, 49, 104,
    50, 86, 71, 112, 79, 79, 86, 99, 122, 79, 88, 90, 116, 101, 108, 57, 84, 89, 84, 66, 75, 79,
    69, 57, 76, 99, 88, 86, 116, 81, 106, 78, 111, 98, 69, 112, 68, 82, 122, 82, 122, 90, 110, 66,
    112, 98, 84, 78, 107, 79, 86, 82, 114, 78, 84, 90, 48, 81, 51, 104, 104, 77, 84, 107, 122, 99,
    86, 69, 121, 100, 87, 81, 50, 77, 48, 115, 49, 79, 84, 70, 112, 100, 122, 66, 80, 78, 50, 86,
    109, 78, 108, 57, 115, 99, 107, 108, 52, 98, 86, 104, 90, 77, 109, 103, 116, 83, 110, 90, 48,
    77, 122, 70, 53, 76, 87, 104, 66, 78, 68, 103, 52, 84, 72, 112, 81, 99, 85, 70, 70, 89, 88, 77,
    48, 86, 87, 78, 97, 90, 71, 49, 82, 90, 70, 57, 115, 86, 85, 104, 86, 84, 71, 49, 110, 83, 107,
    100, 78, 83, 106, 82, 48, 84, 85, 107, 49, 84, 88, 74, 115, 77, 106, 77, 52, 83, 110, 82, 116,
    100, 108, 82, 50, 79, 71, 74, 48, 82, 88, 111, 53, 79, 69, 48, 116, 83, 50, 49, 79, 88, 51,
    112, 88, 82, 69, 53, 83, 101, 107, 78, 108, 84, 70, 70, 119, 88, 48, 103, 120, 82, 51, 100, 66,
    81, 86, 57, 102, 79, 70, 69, 120, 90, 86, 82, 83, 73, 105, 119, 105, 99, 109, 78, 112, 90, 67,
    73, 54, 73, 109, 48, 119, 98, 72, 78, 83, 83, 109, 70, 73, 100, 68, 90, 87, 100, 68, 90, 76,
    82, 107, 108, 90, 90, 87, 49, 88, 84, 71, 82, 71, 86, 71, 74, 71, 89, 86, 57, 71, 85, 49, 82,
    120, 82, 68, 103, 119, 87, 84, 82, 114, 77, 83, 49, 86, 101, 107, 85, 105, 76, 67, 74, 109, 98,
    71, 56, 105, 79, 106, 74, 57, 46, 114, 75, 53, 49, 79, 109, 101, 118, 107, 104, 110, 122, 75,
    69, 100, 97, 98, 107, 74, 105, 106, 67, 56, 84, 48, 109, 88, 89, 104, 119, 95, 102, 120, 73,
    102, 67, 78, 99, 85, 88, 86, 113, 55, 121, 85, 78, 70, 90, 51, 52, 51, 69, 110, 82, 72, 98,
    113, 82, 109, 109, 113, 120, 76, 104, 119, 51, 86, 70, 83, 103, 53, 79, 119, 51, 109, 70, 54,
    70, 119, 115, 79, 99, 87, 121, 111, 81, 50, 111, 83, 81, 68, 57, 56, 69, 111, 107, 121, 108,
    117, 54, 66, 111, 120, 106, 106, 109, 72, 115, 118, 53, 87, 113, 105, 108, 103, 111, 109, 107,
    53, 51, 67, 76, 109, 110, 120, 106, 109, 116, 108, 105, 88, 57, 70, 105, 89, 68, 110, 101, 85,
    67, 116, 117, 56, 118, 103, 117, 74, 49, 99, 55, 99, 119, 52, 52, 78, 75, 65, 70, 88, 51, 90,
    56, 114, 122, 48, 99, 108, 78, 48, 104, 88, 73, 66, 102, 70, 49, 95, 56, 95, 75, 80, 79, 83,
    51, 105, 66, 89, 78, 73, 116, 66, 49, 119, 85, 116, 53, 121, 99, 69, 88, 56, 50, 111, 79, 79,
    73, 101, 67, 109, 75, 74, 54, 111, 115, 71, 55, 71, 66, 122, 101, 119, 102, 66, 109, 68, 97,
    86, 114, 48, 52, 89, 97, 52, 54, 115, 75, 53, 88, 75, 69, 49, 81, 122, 111, 69, 49, 45, 50, 55,
    65, 69, 102, 120, 101, 85, 85, 100, 45, 45, 83, 66, 102, 83, 71, 117, 102, 76, 99, 68, 116, 84,
    56, 109, 69, 98, 100, 87, 112, 79, 122, 119, 104, 106, 105, 85, 88, 104, 98, 99, 80, 121, 87,
    97, 56, 111, 87, 68, 56, 118, 88, 101, 77, 74, 45, 117, 121, 49, 108, 48, 122, 98, 90, 76, 65,
    48, 113, 70, 88, 76, 68, 56, 66, 77, 45, 80, 66, 106, 109, 101, 85, 116, 78, 55, 115, 105, 78,
    67, 77, 111, 56, 72, 81, 13, 10, 117, 115, 101, 114, 45, 97, 103, 101, 110, 116, 58, 32, 77,
    111, 122, 105, 108, 108, 97, 47, 53, 46, 48, 32, 40, 76, 105, 110, 117, 120, 59, 32, 65, 110,
    100, 114, 111, 105, 100, 32, 54, 46, 48, 59, 32, 78, 101, 120, 117, 115, 32, 53, 32, 66, 117,
    105, 108, 100, 47, 77, 82, 65, 53, 56, 78, 41, 32, 65, 112, 112, 108, 101, 87, 101, 98, 75,
    105, 116, 47, 53, 51, 55, 46, 51, 54, 32, 40, 75, 72, 84, 77, 76, 44, 32, 108, 105, 107, 101,
    32, 71, 101, 99, 107, 111, 41, 32, 67, 104, 114, 111, 109, 101, 47, 49, 50, 52, 46, 48, 46, 48,
    46, 48, 32, 77, 111, 98, 105, 108, 101, 32, 83, 97, 102, 97, 114, 105, 47, 53, 51, 55, 46, 51,
    54, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 32, 97, 112, 112,
    108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 13, 10, 104, 111, 115, 116, 58,
    32, 103, 113, 108, 46, 114, 101, 100, 100, 105, 116, 46, 99, 111, 109, 13, 10, 97, 99, 99, 101,
    112, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 105, 100, 101, 110, 116, 105, 116,
    121, 13, 10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 58, 32, 99, 108, 111, 115, 101,
    13, 10, 97, 99, 99, 101, 112, 116, 58, 32, 42, 47, 42, 13, 10, 99, 111, 110, 116, 101, 110,
    116, 45, 108, 101, 110, 103, 116, 104, 58, 32, 53, 49, 13, 10, 13, 10, 123, 34, 105, 100, 34,
    58, 34, 100, 98, 54, 101, 98, 49, 51, 53, 54, 98, 49, 51, 34, 44, 34, 118, 97, 114, 105, 97,
    98, 108, 101, 115, 34, 58, 123, 34, 110, 97, 109, 101, 34, 58, 34, 100, 115, 97, 109, 56, 50,
    34, 125, 125,
  ];

  #[test]
  pub fn test_parse_http_complex() {
    // It's funny to me every time
    // let polynomial_input = poseidon::<2>(&[F::from(69), F::from(420)]);
    let polynomial_input = Fr::from_str_vartime(
      "11598201340436099554408569098798850191953524916637928192967874119458228381703",
    )
    .unwrap();
    let states = parse(&REDDIT_HTTP_REQUEST, polynomial_input).unwrap();

    let machine_state: [String; 8] = RawHttpMachine::from(states[511].to_owned()).into();
    dbg!(machine_state);

    let machine_state: [String; 8] = RawHttpMachine::from(states[1023].to_owned()).into();
    dbg!(machine_state);

    let machine_state = RawHttpMachine::from(states.last().unwrap().to_owned());
    assert_eq!(machine_state.parsing_start, F::ZERO);
    assert_eq!(machine_state.parsing_header, F::ZERO);
    assert_eq!(machine_state.parsing_field_name, F::ZERO);
    assert_eq!(machine_state.parsing_field_value, F::ZERO);
    assert_eq!(machine_state.parsing_body, F::ONE);
    assert_eq!(machine_state.line_status, F::from(0));
    assert_eq!(machine_state.line_digest, F::from(0));
    assert_eq!(machine_state.line_monomial, F::from(0));
  }
}
